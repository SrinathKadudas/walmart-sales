select * from walmart;
select distinct category from walmart;
select count(*) from walmart;
select distinct payment_method from walmart;
select payment_method,count(*) as total from walmart group by payment_method order by total desc;
select count(distinct branch) from walmart;
select max(quantity) from walmart;

-- business problems
-- Q1 - find different payment methods, no.of transactions, no.of quantity sold
select distinct payment_method, count(invoice_id) as transactions, sum(quantity) as quantity_sold
 from walmart group by payment_method order by sum(quantity) desc;
 
 -- Q2 -  Find the total revenue generated by each branch.
 select branch, round(sum(total),2) as revenue from walmart group by branch order by revenue desc;
 
 -- Q3 - Determine the branch with the highest average rating.
 select branch, round(avg(rating),2) as avg_rating from walmart group by branch order by avg(rating) desc limit 1;
 
 -- Q4- Calculate the average profit margin for each product category.
 select category, avg(profit_margin) as avg_profit_margin from walmart group by category order by avg_profit_margin desc;
 
 -- Q5 - Identify the top 3 best-performing branches based on total sales.
 select branch, sum(total) as revenue from walmart group by branch order by revenue limit 3;
 
 -- Q6 - Determine the average, minimum, maximum rating of category for each city, list the city, average_rating, min_rating, max_rating
 select city, category, avg(rating) as avg_rating, min(rating) as min_rating, 
 max(rating) as max_rating from walmart group by city, category;
 
 -- Q6 - Find the most popular payment method by frequency of use.
 select payment_method, count(*) as frequency from walmart group by payment_method order by frequency desc;
 
  -- Q7.  Determine the proportion of each payment method used.

with number_of_payments as(
 select payment_method, count(*) as no_of_payments from walmart group by  payment_method)
 select payment_method, no_of_payments, (no_of_payments)*100/(select count(*) from walmart) as proportion_of_payments 
 from number_of_payments;
 
 -- Q8- Determine the most common payment method for each branch. Display branch and the preferred payment method.
 
 with common_payment as
 (select branch, payment_method, count(*) as total_transactions, rank() over (partition by branch order by count(*) desc) as rn
 from walmart group by branch, payment_method)
 select * from common_payment where rn = 1;
 
-- Q9. Analyze the busiest hours of the day for each branch.
 select branch, 
 hour(str_to_date(time,'%H:%i:%s')) as hour, 
 count(*) as transactions from walmart group by branch, hour order by branch, transactions desc;
 
-- Q10: Identify the busiest day for each branch based on the number of transactions.
 
WITH DailyTransactions AS (
    SELECT Branch, DAYNAME(STR_TO_DATE(date, '%d/%m/%y')) AS day, COUNT(*) AS total_transactions
    FROM walmart
    GROUP BY Branch, day),
MaxTransactions AS (SELECT Branch, MAX(total_transactions) AS max_transactions
FROM DailyTransactions GROUP BY Branch)
SELECT dt.Branch, dt.day as busiest_day, dt.total_transactions
FROM DailyTransactions dt
JOIN MaxTransactions mt
ON dt.Branch = mt.Branch AND dt.total_transactions = mt.max_transactions;

-- Q11. Categorise sales into 3 groups like morning, afternoon and evening. findout each shift and no. of invoices.
 select branch, case 
when hour(str_to_date(time,'%H:%i:%s')) between 6 and 11  then "morning"
when hour(str_to_date(time,'%H:%i:%s'))between 12 and 17 then "afternoon"
when hour(str_to_date(time,'%H:%i:%s')) between 18 and 23 then "evening"
  end as shift,  COUNT(*) AS invoice_count from walmart group by branch, shift order by branch, shift;
 
-- Q12. Determine the least-rated product category in each branch.

 with avg_category_rating as(
 select branch, category, avg(rating)as avg_rating from walmart group by branch, category
 )
 select branch, category, avg_rating from avg_category_rating where (Branch, avg_rating) IN (
select Branch, MIN(avg_rating) from avg_category_rating group by Branch);
        
-- Q13. Calculate the total quantity of items sold per category.
select category, sum(quantity) as total_quantity from walmart group by category order by total_quantity desc;

-- Q14. identify the highest rated category in each branch, displaying branch, category, average rating
 
 WITH AvgCategoryRatings AS (SELECT Branch, category, AVG(rating) AS avg_rating FROM walmart
    GROUP BY Branch, category),
MaxRatings AS (
    SELECT Branch, MAX(avg_rating) AS max_rating
    FROM AvgCategoryRatings GROUP BY Branch)
SELECT acr.Branch,acr.category,acr.avg_rating
FROM AvgCategoryRatings acr
JOIN MaxRatings mr
ON acr.Branch = mr.Branch AND acr.avg_rating = mr.max_rating order by branch;